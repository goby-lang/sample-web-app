require "db"

# Environmnet Configuration
ENV = {
  USER_NAME: 'ENTER YOUR USER NAME',
  DB_DRIVER: 'postgres',
  DB_NAME: 'goby_test',
  SSL_MODE: 'disable'
}

ENV["DB_SETTINGS"] = String.fmt("user=%s dbname=%s, sslmode=%s", ENV['USER_NAME'], ENV['DB_NAME'], ENV('SSL_MODE'))

class ListItem
  attr_reader :id, :title, :checked
  
  def initialize(params)
    @id      ||= params[:id]
    @title   ||= params[:title]
    @checked ||= params[:checked] || 0
  end

  def destroy
    ListItem.db.exec('DELETE FROM list_items WHERE id = $1', @id)
  end

  def self.db
    @db ||= DB.open(ENV['DB_DRIVER'], ENV['DB_SETTINGS'])
  end

  def self.all
    self.db.query("SELECT * FROM list_items")
  end

  def self.find(id)
    self.db.query("SELECT * FROM list_items WHERE id = $1", id)
  end

  def self.create(params = {})
    validates(params) do |result|
      if result[:error]
        return result
      else
        title   = params[:title]
        checked = params[:checked] || 0
        resultID = self.db.exec(String.fmt("INSERT INTO list_items (title, checked) VALUES ('%s', %s)", title, checked))
        new({ id: resultID, title: title, checked: checked })
      end
    end
  end

  def self.validates(params)
    if params[:title].nil? || params[:title].empty?
      yield({ error: 'Title cannot be empty' })
    else
      yield({ error: nil })
    end
  end

  private
end

# db.exec("INSERT INTO users (name, age) VALUES ('Stan', 23)")
# results = db.query("SELECT * FROM users")
# results.count

# puts results
# puts results.count